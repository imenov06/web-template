version: '3.8'

services:
  web:
    build:
      context: ./web
      dockerfile: ./Dockerfile
    container_name: web
    env_file:
      - .env
    environment:
      - VIRTUAL_HOST=${ALLOWED_HOST}
      - LETSENCRYPT_HOST=${ALLOWED_HOST}
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./web/src:/web/src
    networks:
      - app_network
    depends_on:
      - db_postgres
      - db_redis
    restart: unless-stopped

  nginx:
    build:
      context: ./nginx
      dockerfile: ./Dockerfile
    container_name: nginx
    labels:
      - "com.github.nginx-proxy.nginx=true"
    volumes:
      - certs_volume:/etc/nginx/certs
      - vhost_volume:/etc/nginx/vhost.d
      - html_volume:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app_network
    depends_on:
      - web
    restart: unless-stopped

  acme_companion:
    image: nginxproxy/acme-companion:2.6
    container_name: acme-companion
    volumes:
      - certs_volume:/etc/nginx/certs
      - acme_volume:/etc/acme.sh
      - vhost_volume:/etc/nginx/vhost.d
      - html_volume:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
      - NGINX_PROXY_CONTAINER=nginx
    networks:
      - app_network
    depends_on:
      - nginx
    restart: unless-stopped

  db_postgres:
    image: postgres:15-alpine
    container_name: db_postgres_container
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - app_network
    restart: unless-stopped

  db_redis:
    image: redis:7-alpine
    container_name: db_redis_container
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - app_network
    restart: unless-stopped

volumes:
  certs_volume:
  vhost_volume:
  html_volume:
  acme_volume:
  postgres_data:
  redis_data:

networks:
  app_network:
    driver: bridge